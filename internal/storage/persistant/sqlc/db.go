// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getUserByPhoneNumberStmt, err = db.PrepareContext(ctx, getUserByPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByPhoneNumber: %w", err)
	}
	if q.getUserEmailStmt, err = db.PrepareContext(ctx, getUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserEmail: %w", err)
	}
	if q.getUsersByFirstNameStmt, err = db.PrepareContext(ctx, getUsersByFirstName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByFirstName: %w", err)
	}
	if q.getUsersByLastNameStmt, err = db.PrepareContext(ctx, getUsersByLastName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByLastName: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserFirstNameStmt, err = db.PrepareContext(ctx, updateUserFirstName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserFirstName: %w", err)
	}
	if q.updateUserLastNameStmt, err = db.PrepareContext(ctx, updateUserLastName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserLastName: %w", err)
	}
	if q.updateUserPhoneNumberStmt, err = db.PrepareContext(ctx, updateUserPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPhoneNumber: %w", err)
	}
	if q.updateUsersPasswordStmt, err = db.PrepareContext(ctx, updateUsersPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUsersPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getUserByPhoneNumberStmt != nil {
		if cerr := q.getUserByPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByPhoneNumberStmt: %w", cerr)
		}
	}
	if q.getUserEmailStmt != nil {
		if cerr := q.getUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserEmailStmt: %w", cerr)
		}
	}
	if q.getUsersByFirstNameStmt != nil {
		if cerr := q.getUsersByFirstNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByFirstNameStmt: %w", cerr)
		}
	}
	if q.getUsersByLastNameStmt != nil {
		if cerr := q.getUsersByLastNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByLastNameStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserFirstNameStmt != nil {
		if cerr := q.updateUserFirstNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserFirstNameStmt: %w", cerr)
		}
	}
	if q.updateUserLastNameStmt != nil {
		if cerr := q.updateUserLastNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserLastNameStmt: %w", cerr)
		}
	}
	if q.updateUserPhoneNumberStmt != nil {
		if cerr := q.updateUserPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPhoneNumberStmt: %w", cerr)
		}
	}
	if q.updateUsersPasswordStmt != nil {
		if cerr := q.updateUsersPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUsersPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createUserStmt            *sql.Stmt
	deleteUserStmt            *sql.Stmt
	getUserByPhoneNumberStmt  *sql.Stmt
	getUserEmailStmt          *sql.Stmt
	getUsersByFirstNameStmt   *sql.Stmt
	getUsersByLastNameStmt    *sql.Stmt
	updateUserEmailStmt       *sql.Stmt
	updateUserFirstNameStmt   *sql.Stmt
	updateUserLastNameStmt    *sql.Stmt
	updateUserPhoneNumberStmt *sql.Stmt
	updateUsersPasswordStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createUserStmt:            q.createUserStmt,
		deleteUserStmt:            q.deleteUserStmt,
		getUserByPhoneNumberStmt:  q.getUserByPhoneNumberStmt,
		getUserEmailStmt:          q.getUserEmailStmt,
		getUsersByFirstNameStmt:   q.getUsersByFirstNameStmt,
		getUsersByLastNameStmt:    q.getUsersByLastNameStmt,
		updateUserEmailStmt:       q.updateUserEmailStmt,
		updateUserFirstNameStmt:   q.updateUserFirstNameStmt,
		updateUserLastNameStmt:    q.updateUserLastNameStmt,
		updateUserPhoneNumberStmt: q.updateUserPhoneNumberStmt,
		updateUsersPasswordStmt:   q.updateUsersPasswordStmt,
	}
}
