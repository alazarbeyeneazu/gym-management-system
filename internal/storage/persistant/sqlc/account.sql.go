// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name,
    last_name,
    phone_number,
    email,
    password
) values (
    $1,$2,$3,$4,$5
) RETURNING id, first_name, last_name, phone_number, email, password, created_at, state
`

type CreateUserParams struct {
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
	Password    string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE users SET state = 2 
WHERE id = $1 
RETURNING id, first_name, last_name, phone_number, email, password, created_at, state
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.queryRow(ctx, q.deleteUserStmt, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, first_name, last_name, phone_number, email, password, created_at, state FROM users 
WHERE phone_number = $1 
LIMIT 1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.queryRow(ctx, q.getUserByPhoneNumberStmt, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const getUserEmail = `-- name: GetUserEmail :one
SELECT id, first_name, last_name, phone_number, email, password, created_at, state FROM users 
WHERE email = $1 
LIMIT 1
`

func (q *Queries) GetUserEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserEmailStmt, getUserEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const getUsersByFirstName = `-- name: GetUsersByFirstName :many
SELECT id, first_name, last_name, phone_number, email, password, created_at, state FROM users WHERE
first_name = $1 
ORDER BY first_name
`

func (q *Queries) GetUsersByFirstName(ctx context.Context, firstName string) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersByFirstNameStmt, getUsersByFirstName, firstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByLastName = `-- name: GetUsersByLastName :many
SELECT id, first_name, last_name, phone_number, email, password, created_at, state FROM users WHERE
last_name = $1 
ORDER BY last_name
`

func (q *Queries) GetUsersByLastName(ctx context.Context, lastName string) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersByLastNameStmt, getUsersByLastName, lastName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users SET email = $1
WHERE id = $2 
RETURNING id, first_name, last_name, phone_number, email, password, created_at, state
`

type UpdateUserEmailParams struct {
	Email string `json:"email"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserEmailStmt, updateUserEmail, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const updateUserFirstName = `-- name: UpdateUserFirstName :one
UPDATE users SET first_name = $1
WHERE id = $2 
RETURNING id, first_name, last_name, phone_number, email, password, created_at, state
`

type UpdateUserFirstNameParams struct {
	FirstName string `json:"first_name"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdateUserFirstName(ctx context.Context, arg UpdateUserFirstNameParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserFirstNameStmt, updateUserFirstName, arg.FirstName, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const updateUserLastName = `-- name: UpdateUserLastName :one
UPDATE users SET last_name = $1
WHERE id = $2
RETURNING id, first_name, last_name, phone_number, email, password, created_at, state
`

type UpdateUserLastNameParams struct {
	LastName string `json:"last_name"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUserLastName(ctx context.Context, arg UpdateUserLastNameParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserLastNameStmt, updateUserLastName, arg.LastName, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const updateUserPhoneNumber = `-- name: UpdateUserPhoneNumber :one
UPDATE users SET phone_number = $1 
WHERE id = $2 
RETURNING id, first_name, last_name, phone_number, email, password, created_at, state
`

type UpdateUserPhoneNumberParams struct {
	PhoneNumber string `json:"phone_number"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateUserPhoneNumber(ctx context.Context, arg UpdateUserPhoneNumberParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserPhoneNumberStmt, updateUserPhoneNumber, arg.PhoneNumber, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}

const updateUsersPassword = `-- name: UpdateUsersPassword :one
UPDATE users set password = $1
WHERE id = $2
RETURNING id, first_name, last_name, phone_number, email, password, created_at, state
`

type UpdateUsersPasswordParams struct {
	Password string `json:"password"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUsersPassword(ctx context.Context, arg UpdateUsersPasswordParams) (User, error) {
	row := q.queryRow(ctx, q.updateUsersPasswordStmt, updateUsersPassword, arg.Password, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.State,
	)
	return i, err
}
