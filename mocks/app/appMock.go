// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/2ftimeplc/2fbackend/delivery-1/internal/module/user (interfaces: UserService)

// Package mockapp is a generated GoMock package.
package mockapp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/2ftimeplc/2fbackend/delivery-1/internal/constants/models"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(arg0 context.Context, arg1 models.User) models.Errors {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(models.Errors)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockUserService) GetUserByEmail(arg0 context.Context, arg1 string) (models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserServiceMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserService)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByPhoneNumber mocks base method.
func (m *MockUserService) GetUserByPhoneNumber(arg0 context.Context, arg1 string) (models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhoneNumber", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// GetUserByPhoneNumber indicates an expected call of GetUserByPhoneNumber.
func (mr *MockUserServiceMockRecorder) GetUserByPhoneNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhoneNumber", reflect.TypeOf((*MockUserService)(nil).GetUserByPhoneNumber), arg0, arg1)
}

// GetUsersByFirstName mocks base method.
func (m *MockUserService) GetUsersByFirstName(arg0 context.Context, arg1 string) ([]models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByFirstName", arg0, arg1)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// GetUsersByFirstName indicates an expected call of GetUsersByFirstName.
func (mr *MockUserServiceMockRecorder) GetUsersByFirstName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByFirstName", reflect.TypeOf((*MockUserService)(nil).GetUsersByFirstName), arg0, arg1)
}

// GetUsersByLastName mocks base method.
func (m *MockUserService) GetUsersByLastName(arg0 context.Context, arg1 string) ([]models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByLastName", arg0, arg1)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// GetUsersByLastName indicates an expected call of GetUsersByLastName.
func (mr *MockUserServiceMockRecorder) GetUsersByLastName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByLastName", reflect.TypeOf((*MockUserService)(nil).GetUsersByLastName), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockUserService) RegisterUser(arg0 context.Context, arg1 models.User) (models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServiceMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserService)(nil).RegisterUser), arg0, arg1)
}

// UpdateUserEmail mocks base method.
func (m *MockUserService) UpdateUserEmail(arg0 context.Context, arg1 models.User, arg2 string) (models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockUserServiceMockRecorder) UpdateUserEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockUserService)(nil).UpdateUserEmail), arg0, arg1, arg2)
}

// UpdateUserFirstName mocks base method.
func (m *MockUserService) UpdateUserFirstName(arg0 context.Context, arg1 models.User, arg2 string) (models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserFirstName", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// UpdateUserFirstName indicates an expected call of UpdateUserFirstName.
func (mr *MockUserServiceMockRecorder) UpdateUserFirstName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserFirstName", reflect.TypeOf((*MockUserService)(nil).UpdateUserFirstName), arg0, arg1, arg2)
}

// UpdateUserLastName mocks base method.
func (m *MockUserService) UpdateUserLastName(arg0 context.Context, arg1 models.User, arg2 string) (models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastName", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// UpdateUserLastName indicates an expected call of UpdateUserLastName.
func (mr *MockUserServiceMockRecorder) UpdateUserLastName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastName", reflect.TypeOf((*MockUserService)(nil).UpdateUserLastName), arg0, arg1, arg2)
}

// UpdateUserPassword mocks base method.
func (m *MockUserService) UpdateUserPassword(arg0 context.Context, arg1 models.User, arg2 string) (models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserServiceMockRecorder) UpdateUserPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserService)(nil).UpdateUserPassword), arg0, arg1, arg2)
}

// UpdateUserPhoneNumber mocks base method.
func (m *MockUserService) UpdateUserPhoneNumber(arg0 context.Context, arg1 models.User, arg2 string) (models.User, models.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhoneNumber", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(models.Errors)
	return ret0, ret1
}

// UpdateUserPhoneNumber indicates an expected call of UpdateUserPhoneNumber.
func (mr *MockUserServiceMockRecorder) UpdateUserPhoneNumber(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhoneNumber", reflect.TypeOf((*MockUserService)(nil).UpdateUserPhoneNumber), arg0, arg1, arg2)
}
